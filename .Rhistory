temp_var = ncvar_get(nc    = ncf,
varid = variable_name)
print(variable_name)
data = cbind(data, temp_var)
ncol(x = data)
colnames(data)[ncol(x = data)] <- variable_name
remove(temp_var)
}
# SPECIAL QC NOTE
#  THERE IS A MISARCHIVE OF LIQUID SWE.  VALUES OF 1008.1 should be set to zero
data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow > 990] = NA
remove(variable_name)
library("ncdf4")
library("ncdf.tools")
library("lubridate")
library("units")
library("ncdf4.helpers")
library("beanplot")
# NetCDF File Access
# replace this with your local storage directory if you need to download the data serparately.
netcdf_file_URL_or_directory = "http://kyrill.ias.sdsmt.edu:8080/thredds/dodsC/GHCN_POINT_DATA/"
netcdf_file = "GHCND-USW00024090__RAPID_CITY_REGIONAL_AIRPORT_SD.nc"
netcdf_file = "GHCND-USW00014944__SIOUX_FALLS_FOSS_FIELD_SD.nc"
netcdf_file = "GHCND-USW00014929__ABERDEEN_REGIONAL_AIRPORT_SD.nc"
netcdf_source_file = paste(netcdf_file_URL_or_directory,
netcdf_file,
sep = "")
# crack open the NetCDF File
ncf  = nc_open(filename = netcdf_source_file)
# tidy as we go...
remove(netcdf_file_URL_or_directory,
netcdf_file)
# and let's view the inventory
# Read the time coordinates netadata
netcdf_calendar = ncatt_get(nc      = ncf,
varid   = "time",
attname = "calendar")
netcdf_timeunits = ncatt_get(nc      = ncf,
varid   = "time",
attname = "units")
time = nc.get.time.series(f = ncf) # creates a specialized date coordiante
origin_time = netcdf_timeunits$value[1]
origin_time = unlist(strsplit(x     = netcdf_timeunits$value,
split = " "))
origin_time = paste(origin_time[3],
origin_time[4],
sep = " ")
time = as.POSIXct(x      = time,
origin = origin_time,
tz     = "UTC")
remove(netcdf_timeunits)
remove(netcdf_calendar)
remove(origin_time)
station_name = ncatt_get(nc      = ncf,
varid   = 0,   # 0  is used for global attrubutes
attname = "Station_Name")
station_name = station_name$value
# creating climatology data frame
data = data.frame(time     = time,
row.name = time)
data$month  = month(x = time,    # R time value
label=TRUE)  # use text values
data$year   = year( x = time)   # R time value
data$decade = paste((data$year  %/% 10) * 10,
"'s",
sep = "")
data$season3mo = "EMPTY"
monthdigit = month(x = time)
data$season3mo[(monthdigit == 01)] =  "DJF"
data$season3mo[(monthdigit == 02)] =  "DJF"
data$season3mo[(monthdigit == 03)] =  "MAM"
data$season3mo[(monthdigit == 04)] =  "MAM"
data$season3mo[(monthdigit == 05)] =  "MAM"
data$season3mo[(monthdigit == 06)] =  "JJA"
data$season3mo[(monthdigit == 07)] =  "JJA"
data$season3mo[(monthdigit == 08)] =  "JJA"
data$season3mo[(monthdigit == 09)] =  "SON"
data$season3mo[(monthdigit == 10)] =  "SON"
data$season3mo[(monthdigit == 11)] =  "SON"
data$season3mo[(monthdigit == 12)] =  "DJF"
data$season6mo = "EMPTY"
data$season6mo[(monthdigit == 01)] =  "ONDJFM"
data$season6mo[(monthdigit == 02)] =  "ONDJFM"
data$season6mo[(monthdigit == 03)] =  "ONDJFM"
data$season6mo[(monthdigit == 04)] =  "AMJAJS"
data$season6mo[(monthdigit == 05)] =  "AMJAJS"
data$season6mo[(monthdigit == 06)] =  "AMJAJS"
data$season6mo[(monthdigit == 07)] =  "AMJAJS"
data$season6mo[(monthdigit == 08)] =  "AMJAJS"
data$season6mo[(monthdigit == 09)] =  "AMJAJS"
data$season6mo[(monthdigit == 10)] =  "ONDJFM"
data$season6mo[(monthdigit == 11)] =  "ONDJFM"
data$season6mo[(monthdigit == 12)] =  "ONDJFM"
remove(monthdigit)
variable_list = nc.get.variable.list(f = ncf)
for (variable_name in variable_list) {
temp_var = ncvar_get(nc    = ncf,
varid = variable_name)
print(variable_name)
data = cbind(data, temp_var)
ncol(x = data)
colnames(data)[ncol(x = data)] <- variable_name
remove(temp_var)
}
# SPECIAL QC NOTE
#  THERE IS A MISARCHIVE OF LIQUID SWE.  VALUES OF 1008.1 should be set to zero
data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow > 990] = NA
remove(variable_name)
beanplot(data$maximum_air_temperature~data$month, # variable
ll          = 0,                                  # no crosticks per point
overallline = "median",
beanlines   = "median",
main        = station_name,                     # main title
ylab        = "Max Daily Temperature (째C)",     # y axis label
col         = "red")                             # colour
beanplot(data$minimum_air_temperature~data$month,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Min Daily Temperature (째C)", # y axis label
col         = "magenta")
beanplot(data$precipitation_amount[data$precipitation_amount>0]~data$month[data$precipitation_amount>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Total Precipitation (mm)", # y axis label
col         = "green")
beanplot(data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow>0]~data$month[data$liquid_water_content_of_surface_snow>0],
ll          = 0,
main        = station_name,
overallline = "median",
beanlines   = "median",
ylab        = "Daily Snow Water Equivalent (mm)", # y axis label
col         = "cyan")
beanplot((data$mean_wind_speed*1.94384)~data$month,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Mean Wind Speed (kts)", # y axis label
col         = "blue")
beanplot(data$maximum_air_temperature~data$decade, # variable
ll          = 0,                                  # no crosticks per point
overallline = "median",
beanlines   = "median",
main        = station_name,                     # main title
ylab        = "Max Daily Temperature (째C)",     # y axis label
col         = "red")                             # colour
beanplot(data$minimum_air_temperature~data$decade,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Min Daily Temperature (째C)", # y axis label
col         = "magenta")
beanplot(data$precipitation_amount[data$precipitation_amount>0]~data$decade[data$precipitation_amount>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Total Precipitation (mm)", # y axis label
col         = "green")
beanplot(data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow>0]~data$decade[data$liquid_water_content_of_surface_snow>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Snow Water Equivalent (mm)", # y axis label
col         = "cyan")
beanplot((data$mean_wind_speed*1.94384)~data$decade,
ll          = 0,
main        = station_name,
overallline = "median",
beanlines   = "median",
ylab        = "Daily Mean Wind Speed (kts)", # y axis label
col         = "blue")
netcdf_timeunits = ncatt_get(nc      = ncf,
varid   = "time",
attname = "units")
library("ncdf4")
library("ncdf.tools")
library("lubridate")
library("units")
library("ncdf4.helpers")
library("beanplot")
# NetCDF File Access
# replace this with your local storage directory if you need to download the data serparately.
netcdf_file_URL_or_directory = "http://kyrill.ias.sdsmt.edu:8080/thredds/dodsC/GHCN_POINT_DATA/"
netcdf_file = "GHCND-USW00024090__RAPID_CITY_REGIONAL_AIRPORT_SD.nc"
netcdf_file = "GHCND-USW00014944__SIOUX_FALLS_FOSS_FIELD_SD.nc"
# netcdf_file = "GHCND-USW00014929__ABERDEEN_REGIONAL_AIRPORT_SD.nc"
netcdf_source_file = paste(netcdf_file_URL_or_directory,
netcdf_file,
sep = "")
# crack open the NetCDF File
ncf  = nc_open(filename = netcdf_source_file)
# tidy as we go...
remove(netcdf_file_URL_or_directory,
netcdf_file)
# and let's view the inventory
# Read the time coordinates netadata
netcdf_calendar = ncatt_get(nc      = ncf,
varid   = "time",
attname = "calendar")
netcdf_timeunits = ncatt_get(nc      = ncf,
varid   = "time",
attname = "units")
time = nc.get.time.series(f = ncf) # creates a specialized date coordiante
origin_time = netcdf_timeunits$value[1]
origin_time = unlist(strsplit(x     = netcdf_timeunits$value,
split = " "))
origin_time = paste(origin_time[3],
origin_time[4],
sep = " ")
time = as.POSIXct(x      = time,
origin = origin_time,
tz     = "UTC")
remove(netcdf_timeunits)
remove(netcdf_calendar)
remove(origin_time)
station_name = ncatt_get(nc      = ncf,
varid   = 0,   # 0  is used for global attrubutes
attname = "Station_Name")
station_name = station_name$value
# creating climatology data frame
data = data.frame(time     = time,
row.name = time)
data$month  = month(x = time,    # R time value
label=TRUE)  # use text values
data$year   = year( x = time)   # R time value
data$decade = paste((data$year  %/% 10) * 10,
"'s",
sep = "")
data$season3mo = "EMPTY"
monthdigit = month(x = time)
data$season3mo[(monthdigit == 01)] =  "DJF"
data$season3mo[(monthdigit == 02)] =  "DJF"
data$season3mo[(monthdigit == 03)] =  "MAM"
data$season3mo[(monthdigit == 04)] =  "MAM"
data$season3mo[(monthdigit == 05)] =  "MAM"
data$season3mo[(monthdigit == 06)] =  "JJA"
data$season3mo[(monthdigit == 07)] =  "JJA"
data$season3mo[(monthdigit == 08)] =  "JJA"
data$season3mo[(monthdigit == 09)] =  "SON"
data$season3mo[(monthdigit == 10)] =  "SON"
data$season3mo[(monthdigit == 11)] =  "SON"
data$season3mo[(monthdigit == 12)] =  "DJF"
data$season6mo = "EMPTY"
data$season6mo[(monthdigit == 01)] =  "ONDJFM"
data$season6mo[(monthdigit == 02)] =  "ONDJFM"
data$season6mo[(monthdigit == 03)] =  "ONDJFM"
data$season6mo[(monthdigit == 04)] =  "AMJAJS"
data$season6mo[(monthdigit == 05)] =  "AMJAJS"
data$season6mo[(monthdigit == 06)] =  "AMJAJS"
data$season6mo[(monthdigit == 07)] =  "AMJAJS"
data$season6mo[(monthdigit == 08)] =  "AMJAJS"
data$season6mo[(monthdigit == 09)] =  "AMJAJS"
data$season6mo[(monthdigit == 10)] =  "ONDJFM"
data$season6mo[(monthdigit == 11)] =  "ONDJFM"
data$season6mo[(monthdigit == 12)] =  "ONDJFM"
remove(monthdigit)
variable_list = nc.get.variable.list(f = ncf)
for (variable_name in variable_list) {
temp_var = ncvar_get(nc    = ncf,
varid = variable_name)
print(variable_name)
data = cbind(data, temp_var)
ncol(x = data)
colnames(data)[ncol(x = data)] <- variable_name
remove(temp_var)
}
# SPECIAL QC NOTE
#  THERE IS A MISARCHIVE OF LIQUID SWE.  VALUES OF 1008.1 should be set to zero
data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow > 990] = NA
remove(variable_name)
beanplot(data$maximum_air_temperature~data$month, # variable
ll          = 0,                                  # no crosticks per point
overallline = "median",
beanlines   = "median",
main        = station_name,                     # main title
ylab        = "Max Daily Temperature (째C)",     # y axis label
col         = "red")                             # colour
beanplot(data$minimum_air_temperature~data$month,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Min Daily Temperature (째C)", # y axis label
col         = "magenta")
beanplot(data$precipitation_amount[data$precipitation_amount>0]~data$month[data$precipitation_amount>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Total Precipitation (mm)", # y axis label
col         = "green")
beanplot(data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow>0]~data$month[data$liquid_water_content_of_surface_snow>0],
ll          = 0,
main        = station_name,
overallline = "median",
beanlines   = "median",
ylab        = "Daily Snow Water Equivalent (mm)", # y axis label
col         = "cyan")
beanplot((data$mean_wind_speed*1.94384)~data$month,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Mean Wind Speed (kts)", # y axis label
col         = "blue")
beanplot(data$maximum_air_temperature~data$decade, # variable
ll          = 0,                                  # no crosticks per point
overallline = "median",
beanlines   = "median",
main        = station_name,                     # main title
ylab        = "Max Daily Temperature (째C)",     # y axis label
col         = "red")                             # colour
beanplot(data$minimum_air_temperature~data$decade,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Min Daily Temperature (째C)", # y axis label
col         = "magenta")
beanplot(data$precipitation_amount[data$precipitation_amount>0]~data$decade[data$precipitation_amount>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Total Precipitation (mm)", # y axis label
col         = "green")
beanplot(data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow>0]~data$decade[data$liquid_water_content_of_surface_snow>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Snow Water Equivalent (mm)", # y axis label
col         = "cyan")
beanplot((data$mean_wind_speed*1.94384)~data$decade,
ll          = 0,
main        = station_name,
overallline = "median",
beanlines   = "median",
ylab        = "Daily Mean Wind Speed (kts)", # y axis label
col         = "blue")
library("ncdf4")
library("ncdf.tools")
library("lubridate")
library("units")
library("ncdf4.helpers")
library("beanplot")
# NetCDF File Access
# replace this with your local storage directory if you need to download the data serparately.
netcdf_file_URL_or_directory = "http://kyrill.ias.sdsmt.edu:8080/thredds/dodsC/GHCN_POINT_DATA/"
netcdf_file = "GHCND-USW00014944__SIOUX_FALLS_FOSS_FIELD_SD.nc"
netcdf_file = "GHCND-USW00024090__RAPID_CITY_REGIONAL_AIRPORT_SD.nc"
netcdf_source_file = paste(netcdf_file_URL_or_directory,
netcdf_file,
sep = "")
# crack open the NetCDF File
ncf  = nc_open(filename = netcdf_source_file)
# tidy as we go...
remove(netcdf_file_URL_or_directory,
netcdf_file)
# and let's view the inventory
# Read the time coordinates netadata
netcdf_calendar = ncatt_get(nc      = ncf,
varid   = "time",
attname = "calendar")
netcdf_timeunits = ncatt_get(nc      = ncf,
varid   = "time",
attname = "units")
time = nc.get.time.series(f = ncf) # creates a specialized date coordiante
origin_time = netcdf_timeunits$value[1]
origin_time = unlist(strsplit(x     = netcdf_timeunits$value,
split = " "))
origin_time = paste(origin_time[3],
origin_time[4],
sep = " ")
time = as.POSIXct(x      = time,
origin = origin_time,
tz     = "UTC")
remove(netcdf_timeunits)
remove(netcdf_calendar)
remove(origin_time)
station_name = ncatt_get(nc      = ncf,
varid   = 0,   # 0  is used for global attrubutes
attname = "Station_Name")
station_name = station_name$value
# creating climatology data frame
data = data.frame(time     = time,
row.name = time)
data$month  = month(x = time,    # R time value
label=TRUE)  # use text values
data$year   = year( x = time)   # R time value
data$decade = paste((data$year  %/% 10) * 10,
"'s",
sep = "")
data$season3mo = "EMPTY"
monthdigit = month(x = time)
data$season3mo[(monthdigit == 01)] =  "DJF"
data$season3mo[(monthdigit == 02)] =  "DJF"
data$season3mo[(monthdigit == 03)] =  "MAM"
data$season3mo[(monthdigit == 04)] =  "MAM"
data$season3mo[(monthdigit == 05)] =  "MAM"
data$season3mo[(monthdigit == 06)] =  "JJA"
data$season3mo[(monthdigit == 07)] =  "JJA"
data$season3mo[(monthdigit == 08)] =  "JJA"
data$season3mo[(monthdigit == 09)] =  "SON"
data$season3mo[(monthdigit == 10)] =  "SON"
data$season3mo[(monthdigit == 11)] =  "SON"
data$season3mo[(monthdigit == 12)] =  "DJF"
data$season6mo = "EMPTY"
data$season6mo[(monthdigit == 01)] =  "ONDJFM"
data$season6mo[(monthdigit == 02)] =  "ONDJFM"
data$season6mo[(monthdigit == 03)] =  "ONDJFM"
data$season6mo[(monthdigit == 04)] =  "AMJAJS"
data$season6mo[(monthdigit == 05)] =  "AMJAJS"
data$season6mo[(monthdigit == 06)] =  "AMJAJS"
data$season6mo[(monthdigit == 07)] =  "AMJAJS"
data$season6mo[(monthdigit == 08)] =  "AMJAJS"
data$season6mo[(monthdigit == 09)] =  "AMJAJS"
data$season6mo[(monthdigit == 10)] =  "ONDJFM"
data$season6mo[(monthdigit == 11)] =  "ONDJFM"
data$season6mo[(monthdigit == 12)] =  "ONDJFM"
remove(monthdigit)
variable_list = nc.get.variable.list(f = ncf)
for (variable_name in variable_list) {
temp_var = ncvar_get(nc    = ncf,
varid = variable_name)
print(variable_name)
data = cbind(data, temp_var)
ncol(x = data)
colnames(data)[ncol(x = data)] <- variable_name
remove(temp_var)
}
# SPECIAL QC NOTE
#  THERE IS A MISARCHIVE OF LIQUID SWE.  VALUES OF 1008.1 should be set to zero
data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow > 990] = NA
remove(variable_name)
beanplot(data$maximum_air_temperature~data$month, # variable
ll          = 0,                                  # no crosticks per point
overallline = "median",
beanlines   = "median",
main        = station_name,                     # main title
ylab        = "Max Daily Temperature (째C)",     # y axis label
col         = "red")                             # colour
beanplot(data$minimum_air_temperature~data$month,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Min Daily Temperature (째C)", # y axis label
col         = "magenta")
beanplot(data$precipitation_amount[data$precipitation_amount>0]~data$month[data$precipitation_amount>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Total Precipitation (mm)", # y axis label
col         = "green")
beanplot(data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow>0]~data$month[data$liquid_water_content_of_surface_snow>0],
ll          = 0,
main        = station_name,
overallline = "median",
beanlines   = "median",
ylab        = "Daily Snow Water Equivalent (mm)", # y axis label
col         = "cyan")
beanplot((data$mean_wind_speed*1.94384)~data$month,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Mean Wind Speed (kts)", # y axis label
col         = "blue")
beanplot(data$maximum_air_temperature~data$decade, # variable
ll          = 0,                                  # no crosticks per point
overallline = "median",
beanlines   = "median",
main        = station_name,                     # main title
ylab        = "Max Daily Temperature (째C)",     # y axis label
col         = "red")                             # colour
beanplot(data$minimum_air_temperature~data$decade,
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Min Daily Temperature (째C)", # y axis label
col         = "magenta")
beanplot(data$precipitation_amount[data$precipitation_amount>0]~data$decade[data$precipitation_amount>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Total Precipitation (mm)", # y axis label
col         = "green")
beanplot(data$liquid_water_content_of_surface_snow[data$liquid_water_content_of_surface_snow>0]~data$decade[data$liquid_water_content_of_surface_snow>0],
ll          = 0,
overallline = "median",
beanlines   = "median",
main        = station_name,
ylab        = "Daily Snow Water Equivalent (mm)", # y axis label
col         = "cyan")
beanplot((data$mean_wind_speed*1.94384)~data$decade,
ll          = 0,
main        = station_name,
overallline = "median",
beanlines   = "median",
ylab        = "Daily Mean Wind Speed (kts)", # y axis label
col         = "blue")
